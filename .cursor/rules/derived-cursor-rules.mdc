---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
alwaysApply: false
---

## PROJECT OVERVIEW
This project aims to develop a Japanese vocabulary quiz game using Python and the Kivy framework.  The game will feature a user-friendly interface, random word selection from a MongoDB database, and user progress tracking.  Future expansions include user accounts, difficulty levels, and support for other languages.  UI/UX design guidelines are specified in the 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md document. The UI/UX design follows a minimalist Japanese aesthetic with specific color palettes and font choices detailed in the aforementioned document.  The UI/UX design incorporates specific interaction details, accessibility considerations, and device adaptability as described in 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md.

## CODE STYLE
Follow PEP 8 guidelines.  Code should be well-commented and easy to understand.  Use descriptive variable names.

## FOLDER ORGANIZATION
The project will follow a standard structure.  See `<project-structure>` for details.  The `src` folder contains the source code, `resources` contains assets (fonts, sounds, images), and other folders are used for testing, documentation, etc.

## TECH STACK
- **Programming Language:** Python
- **Framework:** Kivy
- **Database:** MongoDB
- **Fonts:** Noto Sans JP, 思源黑體/思源宋體, Noto Sans TC


## PROJECT-SPECIFIC STANDARDS
- UI design should adhere to the minimalist Japanese aesthetic detailed in 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md. Specific color palettes (#E63946, #F1FAEE, #457B9D, #F8F9FA, #1D3557), font choices (思源黑體/宋體 for Chinese, Noto Sans JP for Japanese), and visual hierarchy are defined there.  Specific UI elements, animations, and interactive feedback mechanisms are also defined in the aforementioned document. Version 1.0.0 of the UI design is documented within 2025-03-14_02-15-日語測驗遊戲需求分析.md.
- All code must adhere to the PEP 8 style guide.
- Unit tests should be written for all critical functionalities.
-  Error handling should be comprehensive and user-friendly.

## WORKFLOW & RELEASE RULES
- Use Git for version control.
- Follow a standard branching strategy (e.g., Gitflow).
- Create detailed commit messages.
- Regular code reviews are mandatory.
- Releases will follow a versioning scheme (e.g., Semantic Versioning).


## REFERENCE EXAMPLES
- Kivy UI implementation examples are included in the 2025-03-14 design document.
- MongoDB connection examples are also included in the 2025-03-14 design document.
- UI/UX design examples are detailed in 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- All major design decisions and changes should be documented in the `.specstory` folder.
- The 2025-03-14_02-15-日語測驗遊戲需求分析.md file contains detailed requirements and design specifications.  Version 1.0.0 of the UI design is documented within this file.
- The 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md file contains detailed UI/UX design guidelines, including color palettes, font choices, visual hierarchy specifications, interaction details, accessibility considerations, and device adaptability.

## DEBUGGING
Standard Python debugging techniques should be used.  Consider using a debugger like pdb or IDE debugging tools.

## FINAL DOs AND DON'Ts
- **DO:** Write clean, well-documented code.
- **DO:** Follow the project's coding style guidelines and the UI/UX design guidelines specified in 2025-03-14_02-31-需求分析與ui-ux設計提示詞.md.
- **DO:** Test thoroughly before releasing new features.
- **DO:** Use version control effectively.
- **DON'T:** Commit broken code.
- **DON'T:** Ignore code style guidelines or UI/UX design guidelines.
- **DON'T:** Neglect testing.