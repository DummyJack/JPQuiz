---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
alwaysApply: false
---

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

All project documentation, including design specifications, coding standards, and meeting notes, should be stored in the project's root directory.  Use markdown (.md) format for all documents.  Version updates should be noted within the relevant sections of this file.  The file `2025-04-01_04-44-jptest-專案需求-初建立.md` (ec3823ee-f169-42a2-97a2-d3aa19bd6552) documents the initial project requirements. The project's initial structure and code examples are documented in `2025-04-01_04-44-jptest-專案需求-初建立.md`. Version 2025-05-14 updates include new file structure and code examples.  Additional project requirements are documented in `2025-04-01_04-44-jptest-專案-需求.md` (ec3823ee-f169-42a2-97a2-d3aa19bd6552).  The document `2025-04-01_04-44-jpquiz-專案-需求.md` (ec3823ee-f169-42a2-97a2-d3aa19bd6552) details additional project requirements and initial code implementation. Files `2025-04-01_04-44-jpquiz-專案-需求.md` (ec3823ee-f169-42a2-97a2-97a2-d3aa19bd6552) contain further project requirements and initial code implementation details.  The document `2025-04-01_04-44-jpquiz-專案-需求.md` (ec3823ee-f169-42a2-97a2-d3aa19bd6552) should be referenced for UI design specifications (@mainUI.png, @gameUI.png).  The file `2025-05-14_04-58-小處裡.md` (a42e5ca4-b4a1-49c7-8bb4-ce247ab1f512) contains additional updates and modifications to the project.
The file `2025-05-14_07-10-untitled.md` (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) and `2025-05-14_07-10-資料庫設計與遊戲邏輯修改.md` (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) details database restructuring and game logic modifications.  This document details the new database schema: `{japanese: String, level: int, meaning: String}`.  The initial data includes `{japanese: "試みる", level: 5, meaning: "測試"}`.  The file `2025-05-14_07-10-資料庫設計與遊戲邏輯修改.md` details further database schema modifications and data insertion rules.  The minimum number of entries in the `word` collection must be 10.  Data validation rules for the `word` collection are detailed in the `2025-05-14_07-10-資料庫設計與遊戲邏輯修改.md` document.
Added 2025-05-14_07-10-功能.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing game logic and database schema updates.
Added 2025-04-01_04-44-jpquiz-專案-初步建立.md (ec3823ee-f169-42a2-97a2-d3aa19bd6552) detailing initial project setup and code examples.
Added 2025-05-14_07-10-jpquiz-專案-功能.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing game logic updates and database schema modifications.
Added 2025-05-14_07-10-log.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing log implementation.  The log collection schema is: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.
Added 2025-05-14_07-10-log.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing log implementation. The log collection schema is: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.
Added 2025-05-14_07-10-log.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing log implementation. The log collection schema is: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.
Added 2025-04-01_04-44-jpquiz-專案-初步建立.md detailing initial project setup and code examples.
Added 2025-05-14_13-30-jpquiz-專案-ui-ux.md (cba5d1d7-674c-467c-8a08-c1cf68003a84) detailing UI/UX updates for the help popup.
Added 2025-05-14_12-58-例外處理.md (a42e5ca4-b4a1-49c7-8bb4-ce247ab1f512) detailing exception handling improvements.
Added 2025-05-14_13-30-jpquiz-專案-ui-ux.md (cba5d1d7-674c-467c-8a08-c1cf68003a84) detailing further UI/UX updates for the help popup and game UI.
Added 2025-05-14_07-10-jpquiz-專案-功能.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing game logic updates and database schema modifications. The logs collection schema is now: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.
Added 2025-05-14_07-10-jpquiz-專案-功能.md (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) detailing game logic updates and database schema modifications. The logs collection schema is now: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.


## TECH STACK

- Programming Language: Python
- Framework: Kivy (version 2.2.1)
- Database: MongoDB (ensure service is running; otherwise, fallback to test data)
- Libraries: pymongo (version 4.5.0)
- Font: NotoSansTC (located in `resources/fonts/NotoSansTC-VariableFont_wght.ttf`)


## CODING STANDARDS

- Follow PEP 8 style guidelines.
- Use consistent indentation (4 spaces).
- Write clear, concise, and well-documented code.
- All code should be placed in the `src` directory. UI-related code should be in `src/ui`, and functional code should be in `src/functions`.
- Database interaction should follow the structure defined in `2025-05-14_07-10-untitled.md` (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee) and `2025-05-14_07-10-資料庫設計與遊戲邏輯修改.md` (7208812d-9c2e-4fd9-baf9-ad346a7cc5ee).


## WORKFLOW & RELEASE RULES

- Commit changes frequently with descriptive commit messages.
- Use a branching strategy (e.g., Gitflow) for managing development.
- Before each release, perform thorough testing.
- Testing should be conducted using the `run.py` file in the project root directory.
- All `__pycache__` folders should be ignored in the `.gitignore` file.


## DEBUGGING

- Use print statements for basic debugging.  More advanced debugging tools may be added as needed.


## UI/UX GUIDELINES

- Main UI elements should include a title ("日文學習益智遊戲"), a "Start Game" button, a help icon (@help_icon.png), and author information ("製作人：書賢、Cursor") displayed as static text.  All UI elements should have a smooth transition and consistent background styling. Use animation to improve the user experience and reduce visual jarring during screen transitions. Use a consistent background color across all screens. The background color should be (0.15, 0.15, 0.2, 1).
- Game UI elements should include a question label, four option buttons, a question counter (displaying the current question number out of the total), and author information displayed as static text. The "Return to Main Menu" button should only appear after all questions are answered. The back button should be disabled during active question answering. After selecting an answer, the background color of all option buttons should change to a lighter gray (e.g., (0.8, 0.8, 0.8, 1)).  The back button icon (@back.png) should always be visible. After answering a question, the background color of all option buttons should change to a lighter gray (0.7, 0.7, 0.7, 1).
- Use the NotoSansTC font for all text elements.
- Error handling:  If a connection to MongoDB fails, the application should gracefully fallback to using test data.
- The "Start Game" button should only be clickable once per game session.  After the game ends, the button should become clickable again.
- Minimize visual jarring during transitions between the main and game screens.  Consider smooth transitions and consistent background styling.  Use animation to improve the user experience and reduce visual jarring during screen transitions. Use a consistent background color across all screens.
- After selecting an answer, disable all other answer options until the next question appears.
- A log screen should display a table of game logs, including difficulty level, correct answers (e.g., "3/10"), and timestamp.  Clicking on the correct answers should display a detailed breakdown of each question's correctness.
- A settings button should be added to the top-left corner of the main screen. Clicking this button should open a popup with two dropdown menus: one for selecting difficulty (N5-N1), and one for selecting the number of questions (10, 15, 20).  The popup should have a confirm button and a close button (X) in the top right corner.  The popup should not have a title or a separator line. Difficulty defaults to N5 and questions default to 10.  Only available difficulties and question counts supported by the `words` collection should be selectable.
- The help button should be a circle. The `info_label` should have a background color that matches the main UI. The help popup should have a close button ("X"), no separator line, centered title and text, and appropriate spacing between items in the `help_text`. The close button should be light gray and positioned in the top right corner.
- The help popup's close button should be light gray, positioned in the top right corner, and slightly larger than previously specified.  The text within the help popup should have spacing of 1.5 lines between items.
- The help popup should have a close button ("X") that is light gray, slightly larger than previously specified, positioned in the top right corner. The spacing between items in the `help_text` should be 1.5 lines.


## PROJECT STRUCTURE

```
JPQuiz/
├── run.py
├── src/
│   ├── main.py
│   ├── functions/
│   │   └── game_functions.py
│   │   └── log_functions.py
│   └── ui/
│       ├── main_ui.py
│       └── game_ui.py
│       └── log_ui.py
├── resources/
│   ├── fonts/
│   │   └── NotoSansTC-VariableFont_wght.ttf
│   └── icons/
│       └── help_icon.png
│       └── back.png
├── src/scripts/
│   └── insert_n5_data.py
├── README.md
└── requirements.txt

```

## .gitignore

```
.specstory/
__pycache__/
*/__pycache__/
*/*/__pycache__/
*/*/*/__pycache__/
**/__pycache__/
*.py[cod]
*$py.class
```

## DATABASE RULES

- The `words` collection must contain at least 10 entries at all times.
- The `japanese` field must contain only Japanese text (hiragana, katakana, or kanji).
- The `level` field must be an integer between 1 and 5 (inclusive).
- The `meaning` field must be a string.
- Data initialization: The database is initialized by running `src/scripts/insert_n5_data.py`. A backup set of test data is available if this script fails.  The initialization process now runs `src/scripts/insert_n5_data.py` to populate the database. If this script fails, a backup set of test data is used.  Data deletion is prevented if it would result in fewer than 10 entries in the collection.
- Data validation:  The `words` collection uses MongoDB's schema validation to enforce the following rules:
    - `japanese`: Must be a string containing only Japanese characters (hiragana, katakana, or kanji).
    - `level`: Must be an integer between 1 and 5 (inclusive).
    - `meaning`: Must be a string.
    - Minimum 10 entries must exist in the `words` collection at all times. Deletion is prevented if this would result in fewer than 10 entries.
- A `logs` collection must be created to store game logs. The schema for the `logs` collection is: `{level: int, questions: [{word_id: ObjectId, is_correct: bool}], total_questions: int, correct_answers: int, timestamp: ISODate}`.  The `question` field should reference the `_id` of a document in the `words` collection.  Logs are recorded after each game session.


## PROJECT STRUCTURE

```
JPQuiz/
├── run.py
├── src/
│   ├── main.py
│   ├── functions/
│   │   └── game_functions.py
│   │   └── log_functions.py
│   │   └── validators.py
│   └── ui/
│       ├── main_ui.py
│       └── game_ui.py
│       └── log_ui.py
│   └── scripts/
│       └── insert_n5_data.py
│   └── database/
│       ├── db_crud.py
│       └── db_manager.py
├── resources/
│   ├── fonts/
│   │   └── NotoSansTC-VariableFont_wght.ttf
│   └── icons/
│       └── help_icon.png
│       └── back.png
├── README.md
└── requirements.txt

```